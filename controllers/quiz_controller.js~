var models = require('../models/models.js');

// MW que permite acciones solamente si el quiz objeto pertenece al usuario logeado o si es cuenta admin
exports.ownershipRequired = function(req, res, next){
    var objQuizOwner = req.quiz.UserId;
    var logUser = req.session.user.id;
    var isAdmin = req.session.user.isAdmin;

    if (isAdmin || objQuizOwner === logUser) {
        next();
    } else {
        res.redirect('/');
    }
};

exports.load = function(req, res, next, quizId) {
models.Quiz.find({where: { id: Number(quizId)},
include: [{ model: models.Comment }]}).then(
function(quiz) {
if(quiz){
req.quiz = quiz;
next();
}else{ next(new Error('No existe quizId=' + quizId));}
}
).catch(function(error) { next(error);});
};

exports.show = function(req, res) {
 res.render('quizes/show' , {quiz: req.quiz, errors: []});

};

exports.edit= function(req, res) {
var quiz= req.quiz;
res.render('quizes/edit', {quiz: quiz, errors: []});
};

exports.author = function(req, res) {
res.render('author', { alumnos: 'Ana Martín Labrado y Maria Martinez Torres', errors: [] } );

};

exports.new = function(req, res) {
  var quiz = models.Quiz.build(
    {pregunta: "Pregunta", respuesta: "Respuesta"}
  );

  res.render('quizes/new', {quiz: quiz, errors:[]});
};


exports.index = function(req, res){

var options={};
if (req.user){  // req.user es creado por autoload de usuario
                // si la ruta lleva el parametro .quizId
  options.where={ UserId: req.user.id}
}

var x=req.query.search||"";
var y=x.replace(/\s/g,'%');
y='%'+y+'%';

  models.Quiz.findAll({where: ["pregunta like ?", y], order: [['pregunta','ASC']]}, options).then(
     function(quizes){
       res.render('quizes/index.ejs', { quizes: quizes, 
                                        errors: [],
                                        title: 'Quiz'});
     }
  ).catch(function(error) { next(error);}) 
};









// POST /quizes/create
exports.create = function(req, res) {
  req.body.quiz.UserId = req.session.user.id;
  if(req.files.image){
    req.body.quiz.image = req.files.image.name;
  }	
  var quiz = models.Quiz.build( req.body.quiz );

  quiz
  .validate()
  .then(
    function(err){
      if (err) {
        res.render('quizes/new', {quiz: quiz, errors: err.errors});
      } else {
        quiz // save: guarda en DB campos pregunta y respuesta de quiz
        .save({fields: ["pregunta", "respuesta", "UserId", "image"]})
        .then( function(){ res.redirect('/quizes')}) 
      }      // res.redirect: Redirección HTTP a lista de preguntas
    }
  ).catch(function(error){next(error)});
};
exports.answer = function(req , res) {
var resultado = 'Incorrecto';
   if (req.query.respuesta === req.quiz.respuesta) {
resultado= 'Correcto';
     
} 
   res.render('quizes/answer' , {quiz: req.quiz, respuesta: resultado, errors: []});

};

exports.update = function(req, res) {

  if(req.files.image){
    req.quiz.image = req.files.image.name;
  }

  req.quiz.pregunta  = req.body.quiz.pregunta;
  req.quiz.respuesta = req.body.quiz.respuesta;

  req.quiz
  .validate()
  .then(
    function(err){
      if (err) {
        res.render('quizes/edit', {quiz: req.quiz, errors: err.errors});
      } else {
        req.quiz     // save: guarda campos pregunta y respuesta en DB
        .save( {fields: ["pregunta", "respuesta", "image"]})
        .then( function(){ res.redirect('/quizes');});
      }     // Redirección HTTP a lista de preguntas (URL relativo)
    }
  ).catch(function(error){next(error)});
};


exports.destroy = function(req, res) {
  req.quiz.destroy().then( function() {
    res.redirect('/quizes');
  }).catch(function(error){next(error)});
};
